getwd()
renv::snapshot()
renv::dependencies()
getwd()
setwd("/home/shadybea/Documents/IMS/2024 - 2025/Projects/Statistics4DS")
renv::init()
renv::status()
?renv::status
?renv::status()
?renv::status
citation()
contributors()
citation("dplyr")
citation("urca")
# Libraries
library(openxlsx)
library(openxlsx)
install.packages("openxlsx")
# Libraries
library(openxlsx)
library(tidyverse)
library(fpp3)
library(urca)
# Import the data
data <- read.csv("data/dataset.csv")
View(data)
str(data)
type(data)
typeof(data)
class(data)
as_tsibble(data, key=Country, index=Year)
# Convert to tsibble
ts <- as_tsibble(df, key=Country, index=Year)
View(ts)
View(ts)
# Convert to tsibble
ts <- as_tsibble(df, key=Country, index=Year)
# Libraries
library(openxlsx)
library(tidyverse)
library(fpp3)
library(urca)
# Import the data
df <- read.csv("data/dataset.csv")
# Convert to tsibble
ts <- as_tsibble(df, key=Country, index=Year)
View(ts)
class(ts)
ts$Country
ts[ts$Country = "CHN"]
ts[ts$Country == "CHN"]
ts[Country == "CHN"]
autoplot(ts)
rm(data)
rm(df)
# Autoplot each variable (excluding the index)
for (col in names(ts)[-1]) {  # Exclude the first column (index)
print(autoplot(ts, !!sym(col)) + ggtitle(paste("Autoplot of", col)))
}
# Plot heatmap using ggplot2
ggplot(cor_long, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
labs(title = "Heatmap of Pearson Correlation", x = "", y = "", fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Compute correlation (exclude non-numeric columns like the index)
cor_matrix <- cor(ts %>% select(-year))
# Compute correlation (exclude non-numeric columns like the index)
cor_matrix <- cor(ts %>% select(-Year))
# Libraries
library(openxlsx)
library(tidyverse)
library(fpp3)
library(urca)
# Import the data
df <- read.csv("data/dataset.csv")
# Convert to tsibble
ts <- as_tsibble(df, key=Country, index=Year)
rm(df) # Clean up
View(ts)
autoplot(ts)
# Autoplot each variable (excluding the index)
for (col in names(ts)[-1]) {  # Exclude the first column (index)
print(autoplot(ts, !!sym(col)) + ggtitle(paste("Autoplot of", col)))
}
# Compute correlation (exclude non-numeric columns like the index)
cor_matrix <- cor(ts %>% select(-Year))
# Libraries
library(openxlsx)
library(tidyverse)
library(fpp3)
library(urca)
# Import the data
df <- read.csv("data/dataset.csv")
# Convert to tsibble
ts <- as_tsibble(df, key=Country, index=Year)
rm(df) # Clean up
View(ts)
autoplot(ts)
# Autoplot each variable (excluding the index)
for (col in names(ts)[-1]) {  # Exclude the first column (index)
print(autoplot(ts, !!sym(col)) + ggtitle(paste("Autoplot of", col)))
}
# Ensure that we select only numeric columns
numeric_ts <- ts %>% select(where(is.numeric))
# Compute the correlation matrix (now with only numeric columns)
cor_matrix <- cor(numeric_ts)
numeric_ts
# Compute the correlation matrix (now with only numeric columns)
cor_matrix <- cor(numeric_ts)
# Convert the correlation matrix to a long format
cor_long <- as.data.frame(as.table(cor_matrix))
# Compute the correlation matrix (now with only numeric columns)
cor_matrix <- cor(numeric_ts)
# Ensure that we select only numeric columns
numeric_ts <- ts %>% select(where(is.numeric))
# Compute the correlation matrix (now with only numeric columns)
cor_matrix <- cor(numeric_ts)
numeric_ts
# Plot heatmap using ggplot2
ggplot(cor_matrix, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
labs(title = "Heatmap of Pearson Correlation", x = "", y = "", fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Compute the correlation matrix (now with only numeric columns)
cor_matrix <- cor(numeric_ts)
# Compute correlation (exclude non-numeric columns like the index)
cor_matrix <- cor(ts %>% select(-Year))
# Compute the correlation matrix (now with only numeric columns)
cor_matrix <- cor(numeric_ts)
# Convert the correlation matrix to a long format
cor_long <- as.data.frame(as.table(cor_matrix))
cor_matrix
# Ensure that we select only numeric columns
numeric_ts <- ts %>% select(where(is.numeric))
# Compute the correlation matrix (now with only numeric columns)
cor_matrix <- cor(numeric_ts)
numeric_ts
# Compute the correlation matrix (now with only numeric columns)
cor_matrix <- cor(numeric_ts)
# Ensure that we select only numeric columns
numeric_ts <- ts %>% select(where(is.numeric))
# Compute the correlation matrix (now with only numeric columns)
cor_matrix <- cor(numeric_ts)
cor(numeric_ts)
numeric_ts
autoplot(ts)
############################### LIBRARIES ######################################
library(openxlsx)
library(tidyverse)
library(corrplot)
library(fpp3)
library(urca)
library(ggplot2)
library(purrr)
################################# IMPORT #######################################
# Import the data
df <- read.csv("data/dataset.csv")
# Convert to tsibble
data_tsibble <- as_tsibble(df, key=Country, index=Year)
rm(df) # Clean up
str(data_tsibble)
# tbl_ts [96 × 17] (S3: tbl_ts/tbl_df/tbl/data.frame)
# $ Country                : chr [1:96] "CHN" "CHN" "CHN" "CHN" ...
# $ Year                   : int [1:96] 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 ...
# $ EVSales                : num [1:96] 5870 12440 20280 83480 299000 ...
# $ EVStock                : int [1:96] 12040 25240 45800 119600 449017 966018 1770358 3002617 4276175 16471905 ...
# $ EVChargingPoints       : int [1:96] 0 0 0 30000 59000 141000 213000 270000 510000 2430000 ...
# $ CPI_YoY                : num [1:96] 5.53 2.61 2.57 2.05 1.54 ...
# $ IndustrialProduction   : num [1:96] 3.24e+12 3.57e+12 3.91e+12 4.24e+12 4.50e+12 ...
# $ TotalReserves          : num [1:96] 3204610 3332943 3841374 3860886 3347942 ...
# $ ExchangeRate           : num [1:96] 6.46 6.31 6.15 6.16 6.29 ...
# $ CPI                    : num [1:96] 107 110 113 115 117 ...
# $ GDP                    : num [1:96] 6422699 6926658 7465287 8017866 8581309 ...
# $ UnemploymentRate       : num [1:96] 4.1 4.1 4.07 4.08 4.05 ...
# $ OilPrice               : num [1:96] 94.9 94 98 93.2 48.7 ...
# $ EVAveragePrice         : int [1:96] 51736 52084 56028 44776 42340 46284 44776 41412 42804 54600 ...
# $ Mileage_KM             : int [1:96] 139 160 189 210 211 233 267 304 336 338 ...
# $ LithiumBatteryPrice_USD: int [1:96] 924 726 668 592 384 295 221 181 157 137 ...
# $ NewCarAveragePrice     : int [1:96] 37311 36874 37826 37519 38240 38455 38350 38365 40546 44021 ...
# - attr(*, "key")= tibble [8 × 2] (S3: tbl_df/tbl/data.frame)
# ..$ Country: chr [1:8] "CHN" "DEU" "FRA" "GBR" ...
# ..$ .rows  : list<int> [1:8]
# .. ..$ : int [1:12] 1 2 3 4 5 6 7 8 9 10 ...
# .. ..$ : int [1:12] 13 14 15 16 17 18 19 20 21 22 ...
# .. ..$ : int [1:12] 25 26 27 28 29 30 31 32 33 34 ...
# .. ..$ : int [1:12] 37 38 39 40 41 42 43 44 45 46 ...
# .. ..$ : int [1:12] 49 50 51 52 53 54 55 56 57 58 ...
# .. ..$ : int [1:12] 61 62 63 64 65 66 67 68 69 70 ...
# .. ..$ : int [1:12] 73 74 75 76 77 78 79 80 81 82 ...
# .. ..$ : int [1:12] 85 86 87 88 89 90 91 92 93 94 ...
# .. ..@ ptype: int(0)
# ..- attr(*, ".drop")= logi TRUE
# - attr(*, "index")= chr "Year"
# ..- attr(*, "ordered")= logi TRUE
# - attr(*, "index2")= chr "Year"
# - attr(*, "interval")= interval [1:1] 1Y
# ..@ .regular: logi TRUE
View(data_tsibble)
############################# VISUALIZATION ####################################
# Simple autoplot
for (col in names(data_tsibble)[c(-1, -2)]) {  # Exclude the first column (index)
print(autoplot(data_tsibble, !!sym(col)) + ggtitle(paste("Plot of", col)))
}
